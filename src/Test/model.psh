
struct Material
{  
   float4 ambient;
   float4 diffuse;
   float4 specular;
   float4 emissive;
   float  shininess;
   int    hasTex[4];
};

cbuffer MaterialBuffer
{
   Material cbMat;
};

struct VS_OUT
{
    float4 Pos       : SV_POSITION;
	float3 Normal    : NORMAL;
	float2 Tex       : TEXCOORD0;
	float3 Tangent   : TANGENT;
	float3 BiTangent : BITANGENT;
	float3 WorldPos  : POSITION;
};

Texture2D ambientTex	: register(t0);
Texture2D diffuseTex	: register(t1);
Texture2D specularTex	: register(t2);
Texture2D normalTex	    : register(t3);

SamplerState texState : register(s0);

float4 PS(VS_OUT ps_in) : SV_TARGET
{

    ps_in.Normal    = normalize(ps_in.Normal);
	ps_in.Tangent   = normalize(ps_in.Tangent);
	ps_in.BiTangent = normalize(ps_in.BiTangent);

    float4 ambient  = cbMat.ambient;
	float4 diffuse  = cbMat.diffuse;
	float4 specular = cbMat.specular;
	float3 lightDir = float3(0.5f, 0.75f, -0.5f);

	//Ambient texture
	if ( cbMat.hasTex[0] )
	{
	   float4 ambientTexColor = ambientTex.Sample(texState, ps_in.Tex);
	   ambient *= ambientTexColor;
	}

	//Diffuse texture
	if (cbMat.hasTex[1])
	{
		diffuse *= max(0.0, dot(ps_in.Normal, lightDir) ); 
		float4 diffuseTexColor = diffuseTex.Sample(texState, ps_in.Tex);
		diffuse *= diffuseTexColor;
	}

	//Specular texture
	if (cbMat.hasTex[2])
	{
	   float3 half_vector = normalize(lightDir + normalize(ps_in.WorldPos) );
	   float intensity = pow( max(0.0f, dot(ps_in.Normal, half_vector) ), cbMat.shininess);
	   float4 specularTexColor = specularTex.Sample(texState, ps_in.Tex);
	   specular *= intensity;
	   specular *= specularTexColor;
	}

	//Normal texture
	if (cbMat.hasTex[3])
	{
	   //Reset the diffuse 
	    //difuse = cbMat.diffuse;

	    float4 normalMap = normalTex.Sample(texState, ps_in.Tex );

	    //Change normal map range from [0, 1] to [-1, 1]
	    normalMap = (2.0f * normalMap) - 1.0f;
	    float3x3 texSpace = float3x3(ps_in.Tangent, ps_in.BiTangent, ps_in.Normal);
	    ps_in.Normal = normalize(mul(normalMap, texSpace));
        float intensity = dot(lightDir, ps_in.Normal);

		diffuse *= intensity;
    }
	
	//Add the bumping to texture
	float4 pixelColor = saturate(ambient + diffuse + specular);

	return pixelColor;
}