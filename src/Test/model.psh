
cbuffer Material
{
  float4 ambient;
  float4 diffuse;
  float4 specular;
  float4 emissive;
  float  shininess;
};

struct VS_OUT
{
    float4 Pos       : SV_POSITION;
	float3 Normal    : NORMAL;
	float2 Tex       : TEXCOORD0;
	float3 Tangent   : TANGENT;
	float3 BiTangent : BITANGENT;
	float3 worldPos  : POSITION;
};

Texture2D tex	      : register(t0);
SamplerState texState : register(s0);

Texture2D texNormal	  : register(t1);

float4 PS(VS_OUT ps_in) : SV_TARGET
{
    float4 texColor = tex.Sample(texState, ps_in.Tex);
    ps_in.Normal    = normalize(ps_in.Normal);
	ps_in.Tangent   = normalize(ps_in.Tangent);
	ps_in.BiTangent = normalize(ps_in.BiTangent);

	//Set the normal map data
	float4 normalMap = texNormal.Sample(texState, ps_in.Tex );
	//Change normal map range from [0, 1] to [-1, 1]
	normalMap = (2.0f * normalMap) - 1.0f;
	float3x3 texSpace = float3x3(ps_in.Tangent, ps_in.BiTangent , ps_in.Normal);
	ps_in.Normal = normalize(mul(normalMap, texSpace));

	//calc the diffuse light with normal map
	float3 lightDir = float3(0.5f, 0.75f, -0.5f);
    float intensity = dot(lightDir, ps_in.Normal);
    float4 diff = saturate( max(intensity, 0.0f) * diffuse );
	
	//Add the bumping to texture
	float4 pixelColor = saturate(diffuse * ambient + diff) * texColor;

	return pixelColor;
}